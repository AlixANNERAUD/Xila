// This file is automatically generated by the Generate.py script.
#include "Software/Berry/Berry.hpp"
extern "C"
{
#include "be_constobj.h"
#include "be_mapping.h"
}
using namespace Xila_Namespace;
using namespace Drive_Types;

// - Functions

// - - Constructors
const void* Berry_File_Class_Initialize() { return new File_Class(); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Initialize, "+_p", "");
const void* Berry_File_Class_Initialize_fsFile(fs::File File) { return new File_Class(); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Initialize_fsFile, "+_p", ".");
const void* Berry_File_Class_Initialize_Drive_TypesFile_Class(Drive_Types::File_Class& arg0) { return new File_Class(); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Initialize_Drive_TypesFile_Class, "+_p", ".");

// - - Destructors
void Berry_File_Class_Deinitialize_void(void* Instance) { delete static_cast<File_Class*>(Instance); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Deinitialize_void, "", ".");

// - - Functions
size_t Berry_File_Class_write_void_uint8_t(void* Instance, uint8_t arg0) { return static_cast<File_Class*>(Instance)->write(arg0); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_write_void_uint8_t, ".", "..");
size_t Berry_File_Class_write_void_uint8_t_size_t(void* Instance, uint8_t* Buffer, size_t Size) { return static_cast<File_Class*>(Instance)->write(Buffer, Size); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_write_void_uint8_t_size_t, ".", "...");
int Berry_File_Class_available_void(void* Instance) { return static_cast<File_Class*>(Instance)->available(); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_available_void, "i", ".");
int Berry_File_Class_read_void(void* Instance) { return static_cast<File_Class*>(Instance)->read(); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_read_void, "i", ".");
int Berry_File_Class_peek_void(void* Instance) { return static_cast<File_Class*>(Instance)->peek(); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_peek_void, "i", ".");
void Berry_File_Class_flush_void(void* Instance) { return static_cast<File_Class*>(Instance)->flush(); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_flush_void, "", ".");
size_t Berry_File_Class_readBytes_void_char_size_t(void* Instance, char* arg0, size_t arg1) { return static_cast<File_Class*>(Instance)->readBytes(arg0, arg1); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_readBytes_void_char_size_t, ".", "...");
Size_Type Berry_File_Class_Write_void_uint8_t(void* Instance, uint8_t arg0) { return static_cast<File_Class*>(Instance)->Write(arg0); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Write_void_uint8_t, "i", "..");
Size_Type Berry_File_Class_Write_void_uint8_t_Size_Type(void* Instance, uint8_t* Buffer, Size_Type Size) { return static_cast<File_Class*>(Instance)->Write(Buffer, Size); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Write_void_uint8_t_Size_Type, "i", "...");
int Berry_File_Class_Available_void(void* Instance) { return static_cast<File_Class*>(Instance)->Available(); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Available_void, "i", ".");
int Berry_File_Class_Read_void(void* Instance) { return static_cast<File_Class*>(Instance)->Read(); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Read_void, "i", ".");
int Berry_File_Class_Peek_void(void* Instance) { return static_cast<File_Class*>(Instance)->Peek(); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Peek_void, "i", ".");
void Berry_File_Class_Flush_void(void* Instance) { return static_cast<File_Class*>(Instance)->Flush(); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Flush_void, "", ".");
bool Berry_File_Class_Is_Valid_void(void* Instance) { return static_cast<File_Class*>(Instance)->Is_Valid(); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Is_Valid_void, "b", ".");
Size_Type Berry_File_Class_Read_void_uint8_t_Size_Type(void* Instance, uint8_t* Buffer, Size_Type Size) { return static_cast<File_Class*>(Instance)->Read(Buffer, Size); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Read_void_uint8_t_Size_Type, "i", "...");
Size_Type Berry_File_Class_Read_Bytes_void_char_Size_Type(void* Instance, char* Buffer, Size_Type Length) { return static_cast<File_Class*>(Instance)->Read_Bytes(Buffer, Length); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Read_Bytes_void_char_Size_Type, "i", "...");
bool Berry_File_Class_Seek_void_uint32_t_Drive_TypesSeek_Mode_Type(void* Instance, uint32_t Position, Drive_Types::Seek_Mode_Type Mode) { return static_cast<File_Class*>(Instance)->Seek(Position, Mode); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Seek_void_uint32_t_Drive_TypesSeek_Mode_Type, "b", "...");
bool Berry_File_Class_Seek_void_uint32_t(void* Instance, uint32_t Position) { return static_cast<File_Class*>(Instance)->Seek(Position); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Seek_void_uint32_t, "b", "..");
Size_Type Berry_File_Class_Get_Position_void(void* Instance) { return static_cast<File_Class*>(Instance)->Get_Position(); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Get_Position_void, "i", ".");
Size_Type Berry_File_Class_Get_Size_void(void* Instance) { return static_cast<File_Class*>(Instance)->Get_Size(); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Get_Size_void, "i", ".");
Result_Type Berry_File_Class_Set_Buffer_Size_void_Size_Type(void* Instance, Size_Type Size) { return static_cast<File_Class*>(Instance)->Set_Buffer_Size(Size); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Set_Buffer_Size_void_Size_Type, ".", "..");
void Berry_File_Class_Close_void(void* Instance) { return static_cast<File_Class*>(Instance)->Close(); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Close_void, "", ".");
time_t Berry_File_Class_Get_Modification_Time_void(void* Instance) { return static_cast<File_Class*>(Instance)->Get_Modification_Time(); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Get_Modification_Time_void, ".", ".");
char const * Berry_File_Class_Get_Path_void(void* Instance) { return static_cast<File_Class*>(Instance)->Get_Path(); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Get_Path_void, ".", ".");
char const * Berry_File_Class_Get_Name_void(void* Instance) { return static_cast<File_Class*>(Instance)->Get_Name(); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Get_Name_void, ".", ".");
bool Berry_File_Class_Is_Directory_void(void* Instance) { return static_cast<File_Class*>(Instance)->Is_Directory(); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Is_Directory_void, "b", ".");
Drive_Types::File_Class Berry_File_Class_Open_Next_File_void_bool_bool(void* Instance, bool Write, bool Append) { return static_cast<File_Class*>(Instance)->Open_Next_File(Write, Append); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Open_Next_File_void_bool_bool, ".", "...");
void Berry_File_Class_Rewind_Directory_void(void* Instance) { return static_cast<File_Class*>(Instance)->Rewind_Directory(); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Rewind_Directory_void, "", ".");
uint16_t Berry_File_Class_Count_Items_void(void* Instance) { return static_cast<File_Class*>(Instance)->Count_Items(); }
BE_FUNC_CTYPE_DECLARE(Berry_File_Class_Count_Items_void, "i", ".");

// - Berry declaration
/* @const_object_info_begin
class Berry_File_Class(scope:global, name:File_Type)
{
	_p, var
	init, ctype_func(Berry_File_Class_Initialize)
	init, ctype_func(Berry_File_Class_Initialize_fsFile)
	write, ctype_func(Berry_File_Class_write_void_uint8_t)
	write, ctype_func(Berry_File_Class_write_void_uint8_t_size_t)
	available, ctype_func(Berry_File_Class_available_void)
	read, ctype_func(Berry_File_Class_read_void)
	peek, ctype_func(Berry_File_Class_peek_void)
	flush, ctype_func(Berry_File_Class_flush_void)
	readBytes, ctype_func(Berry_File_Class_readBytes_void_char_size_t)
	Write, ctype_func(Berry_File_Class_Write_void_uint8_t)
	Write, ctype_func(Berry_File_Class_Write_void_uint8_t_Size_Type)
	Available, ctype_func(Berry_File_Class_Available_void)
	Read, ctype_func(Berry_File_Class_Read_void)
	Peek, ctype_func(Berry_File_Class_Peek_void)
	Flush, ctype_func(Berry_File_Class_Flush_void)
	Is_Valid, ctype_func(Berry_File_Class_Is_Valid_void)
	Read, ctype_func(Berry_File_Class_Read_void_uint8_t_Size_Type)
	Read_Bytes, ctype_func(Berry_File_Class_Read_Bytes_void_char_Size_Type)
	Seek, ctype_func(Berry_File_Class_Seek_void_uint32_t_Drive_TypesSeek_Mode_Type)
	Seek, ctype_func(Berry_File_Class_Seek_void_uint32_t)
	Get_Position, ctype_func(Berry_File_Class_Get_Position_void)
	Get_Size, ctype_func(Berry_File_Class_Get_Size_void)
	Set_Buffer_Size, ctype_func(Berry_File_Class_Set_Buffer_Size_void_Size_Type)
	Close, ctype_func(Berry_File_Class_Close_void)
	Get_Modification_Time, ctype_func(Berry_File_Class_Get_Modification_Time_void)
	Get_Path, ctype_func(Berry_File_Class_Get_Path_void)
	Get_Name, ctype_func(Berry_File_Class_Get_Name_void)
	Is_Directory, ctype_func(Berry_File_Class_Is_Directory_void)
	Open_Next_File, ctype_func(Berry_File_Class_Open_Next_File_void_bool_bool)
	Rewind_Directory, ctype_func(Berry_File_Class_Rewind_Directory_void)
	Count_Items, ctype_func(Berry_File_Class_Count_Items_void)
	init, ctype_func(Berry_File_Class_Initialize_Drive_TypesFile_Class)
	deinit, ctype_func(Berry_File_Class_Deinitialize_void)
}
@const_object_info_end */


extern "C"
{
	#include "../generate/be_fixed_Berry_File_Class.h"
}
// - Functions
uint64_t Berry_Drive_Class_Get_Size() { return Drive.Get_Size(); }
BE_FUNC_CTYPE_DECLARE(Berry_Drive_Class_Get_Size, "i", "");
Drive_Types::Drive_Type_Type Berry_Drive_Class_Get_Type() { return Drive.Get_Type(); }
BE_FUNC_CTYPE_DECLARE(Berry_Drive_Class_Get_Type, ".", "");
uint64_t Berry_Drive_Class_Get_Total_Size() { return Drive.Get_Total_Size(); }
BE_FUNC_CTYPE_DECLARE(Berry_Drive_Class_Get_Total_Size, "i", "");
uint64_t Berry_Drive_Class_Get_Used_Size() { return Drive.Get_Used_Size(); }
BE_FUNC_CTYPE_DECLARE(Berry_Drive_Class_Get_Used_Size, "i", "");
bool Berry_Drive_Class_Exists_char(char* Path) { return Drive.Exists(Path); }
BE_FUNC_CTYPE_DECLARE(Berry_Drive_Class_Exists_char, "b", ".");
Result_Type Berry_Drive_Class_Make_Directory_char(char* Path) { return Drive.Make_Directory(Path); }
BE_FUNC_CTYPE_DECLARE(Berry_Drive_Class_Make_Directory_char, ".", ".");
Result_Type Berry_Drive_Class_Remove_Directory_char(char* Path) { return Drive.Remove_Directory(Path); }
BE_FUNC_CTYPE_DECLARE(Berry_Drive_Class_Remove_Directory_char, ".", ".");
Result_Type Berry_Drive_Class_Remove_Directory_char_bool(char* Path, bool Recursive) { return Drive.Remove_Directory(Path, Recursive); }
BE_FUNC_CTYPE_DECLARE(Berry_Drive_Class_Remove_Directory_char_bool, ".", "..");
Result_Type Berry_Drive_Class_Remove_char(char* Path) { return Drive.Remove(Path); }
BE_FUNC_CTYPE_DECLARE(Berry_Drive_Class_Remove_char, ".", ".");
Drive_Types::File_Type Berry_Drive_Class_Open_char_bool_bool(char* Path, bool Write, bool Append) { return Drive.Open(Path, Write, Append); }
BE_FUNC_CTYPE_DECLARE(Berry_Drive_Class_Open_char_bool_bool, ".", "...");
Result_Type Berry_Drive_Class_Remove_File_char(char* Path) { return Drive.Remove_File(Path); }
BE_FUNC_CTYPE_DECLARE(Berry_Drive_Class_Remove_File_char, ".", ".");
Result_Type Berry_Drive_Class_Rename_char_char(char* Path_From, char* Path_To) { return Drive.Rename(Path_From, Path_To); }
BE_FUNC_CTYPE_DECLARE(Berry_Drive_Class_Rename_char_char, ".", "..");
Result_Type Berry_Drive_Class_Copy_Drive_TypesFile_Type_Drive_TypesFile_Type(Drive_Types::File_Type& Origin_File, Drive_Types::File_Type& Destination_File) { return Drive.Copy(Origin_File, Destination_File); }
BE_FUNC_CTYPE_DECLARE(Berry_Drive_Class_Copy_Drive_TypesFile_Type_Drive_TypesFile_Type, ".", "..");
Result_Type Berry_Drive_Class_Copy_char_char(char* Path_From, char* Path_To) { return Drive.Copy(Path_From, Path_To); }
BE_FUNC_CTYPE_DECLARE(Berry_Drive_Class_Copy_char_char, ".", "..");
Result_Type Berry_Drive_Class_Cut_Drive_TypesFile_Type_Drive_TypesFile_Type(Drive_Types::File_Type& Origin_File, Drive_Types::File_Type& Destination_File) { return Drive.Cut(Origin_File, Destination_File); }
BE_FUNC_CTYPE_DECLARE(Berry_Drive_Class_Cut_Drive_TypesFile_Type_Drive_TypesFile_Type, ".", "..");
Result_Type Berry_Drive_Class_Cut_char_char(char* Path_From, char* Path_To) { return Drive.Cut(Path_From, Path_To); }
BE_FUNC_CTYPE_DECLARE(Berry_Drive_Class_Cut_char_char, ".", "..");
void Berry_Drive_Class_End() { return Drive.End(); }
BE_FUNC_CTYPE_DECLARE(Berry_Drive_Class_End, "", "");
Result_Type Berry_Drive_Class_Start() { return Drive.Start(); }
BE_FUNC_CTYPE_DECLARE(Berry_Drive_Class_Start, ".", "");

// - Berry declaration
/* @const_object_info_begin
module Drive (scope:global)
{
	Get_Size, ctype_func(Berry_Drive_Class_Get_Size)
	Get_Type, ctype_func(Berry_Drive_Class_Get_Type)
	Get_Total_Size, ctype_func(Berry_Drive_Class_Get_Total_Size)
	Get_Used_Size, ctype_func(Berry_Drive_Class_Get_Used_Size)
	Exists, ctype_func(Berry_Drive_Class_Exists_char)
	Make_Directory, ctype_func(Berry_Drive_Class_Make_Directory_char)
	Remove_Directory, ctype_func(Berry_Drive_Class_Remove_Directory_char)
	Remove_Directory, ctype_func(Berry_Drive_Class_Remove_Directory_char_bool)
	Remove, ctype_func(Berry_Drive_Class_Remove_char)
	Open, ctype_func(Berry_Drive_Class_Open_char_bool_bool)
	Remove_File, ctype_func(Berry_Drive_Class_Remove_File_char)
	Rename, ctype_func(Berry_Drive_Class_Rename_char_char)
	Copy, ctype_func(Berry_Drive_Class_Copy_Drive_TypesFile_Type_Drive_TypesFile_Type)
	Copy, ctype_func(Berry_Drive_Class_Copy_char_char)
	Cut, ctype_func(Berry_Drive_Class_Cut_Drive_TypesFile_Type_Drive_TypesFile_Type)
	Cut, ctype_func(Berry_Drive_Class_Cut_char_char)
	End, ctype_func(Berry_Drive_Class_End)
	Start, ctype_func(Berry_Drive_Class_Start)

	Seek_Mode_Set, int(0)
	Seek_Mode_Current, int(1)
	Seek_Mode_End, int(2)

	Drive_None, int(0)
	Drive_MMC, int(1)
	Drive_SD_SC, int(2)
	Drive_SD_HC, int(3)
	Drive_Unknow, int(4)

	File_Type, class(Berry_File_Class)

}
@const_object_info_end */


extern "C"
{
	#include "../generate/be_fixed_Drive.h"
}